#cloud-config
users:
  - name: web
    groups: sudo
    shell: /bin/bash
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
    ssh-authorized-keys:
      - {{sshKey}}
apt_preserve_sources_list: true
apt_sources:
  - source: "ppa:certbot/certbot"
  - source: "deb http://dl.hhvm.com/ubuntu xenial main"
    keyid: B4112585D386EB94
    filenae: hhvm-ppa.list
package_update: true
package_upgrade: true
packages:
  - nginx
  - nginx-common
  - nginx-full
  - expect
  - unzip
  - hhvm
  - mariadb-client
  - mariadb-server
  - build-essential
  - libssl-dev
  - python
  - imagemagick
  - software-properties-common
  - python-certbot-nginx
  - unattended-upgrades
write_files:
  - path: /etc/apt/apt.conf.d/20auto-upgrades
    content: |
        APT::Periodic::Update-Package-Lists "1";
        APT::Periodic::Unattended-Upgrade "1";
  - path: /etc/nginx/ssl-options.conf
    content: |
        ssl_session_cache shared:le_nginx_SSL:1m;
        ssl_session_timeout 1440m;

        # openssl dhparam 4096 -out /etc/ssl/dhparam.pem
        ssl_dhparam /etc/ssl/dhparam.pem;

        ssl_protocols TLSv1.2 TLSv1.1 TLSv1;
        ssl_prefer_server_ciphers on;
        ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';

        ssl_session_cache shared:TLS:2m;

        # OCSP stapling
        ssl_stapling on;
        ssl_stapling_verify on;
        resolver 8.8.8.8 8.8.4.4 [2001:4860:4860::8888] [2001:4860:4860::8844];

        # Set HSTS to 365 days
        add_header Strict-Transport-Security 'max-age=31536000; includeSubDomains';
  - path: /etc/nginx/sites-available/wordpress
    content: |
        server {
                listen 443 ssl http2 default_server;
                listen [::]:443 ssl http2 default_server;

                server_name {{hostname}};

                include /etc/nginx/ssl-options.conf;

                ssl_certificate /etc/letsencrypt/live/{{hostname}}/fullchain.pem;
                ssl_certificate_key /etc/letsencrypt/live/{{hostname}}/privkey.pem;

                root /var/www/html;
                gzip on;
                gzip_min_length 1100;
                gzip_buffers 4 32k;
                gzip_types text/plain application/x-javascript application/javascript text/xml text/css;
                gzip_vary on;

                # Add index.php to the list if you are using PHP
                index index.html index.htm index.php;

                include hhvm.conf;

                location /
                {
                  try_files $uri $uri/ /index.php?q=$uri&$args;
                }

                location ~* .(ogg|ogv|svg|svgz|eot|otf|woff|mp4|ttf|css|rss|atom|js|jpg|jpeg|gif|png|ico|zip|tgz|gz|rar|bz2|doc|xls|exe|ppt|tar|mid|midi|wav|bmp|rtf)$
                {
                  expires max;
                  log_not_found off;
                  access_log off;
                }
        }

        server {
                listen 80;
                listen [::]:80;

                server_name {{hostname}};
                return 301 https://$server_name$request_uri;
        }
  - path: /etc/nginx/sites-available/wordpress-http-only
    content: |
      server {
              listen 80;
              listen [::]:80;

              server_name {{hostname}};

              root /var/www/html;
              gzip on;
              gzip_min_length 1100;
              gzip_buffers 4 32k;
              gzip_types text/plain application/x-javascript application/javascript text/xml text/css;
              gzip_vary on;

              # Add index.php to the list if you are using PHP
              index index.html index.htm index.php;

              include hhvm.conf;

              location /
              {
                try_files $uri $uri/ /index.php?q=$uri&$args;
              }

              location ~* .(ogg|ogv|svg|svgz|eot|otf|woff|mp4|ttf|css|rss|atom|js|jpg|jpeg|gif|png|ico|zip|tgz|gz|rar|bz2|doc|xls|exe|ppt|tar|mid|midi|wav|bmp|rtf)$
              {
                expires max;
                log_not_found off;
                access_log off;
              }
      }
  - path: /etc/hhvm/php.ini
    content: |
        ; php options
        session.save_handler = files
        session.save_path = /var/lib/hhvm/sessions
        session.gc_probability = 0
        session.gc_maxlifetime = 1440
        memory_limit = 512M
        upload_max_filesize = 128M
        post_max_size = 128M

        ; hhvm specific
        hhvm.log.level = Warning
        hhvm.log.always_log_unhandled_exceptions = true
        hhvm.log.runtime_error_reporting_level = 8191
        hhvm.mysql.typed_results = false
        hhvm.eval.perf_pid_map = false
  - path: /etc/hhvm/server.ini
    content: |
        ; php options

        pid = /var/run/hhvm/pid

        ; hhvm specific

        ; hhvm.server.port = 9000
        hhvm.server.file_socket=/var/run/hhvm/hhvm.sock
        hhvm.server.type = fastcgi
        hhvm.server.default_document = index.php
        hhvm.log.use_log_file = true
        hhvm.log.file = /var/log/hhvm/error.log
        hhvm.repo.central.path = /var/run/hhvm/hhvm.hhbc
        hhvm.keep_perf_pid_map = 0
        hhvm.perf_pid_map = 0
        hhvm.perf_data_map = 0
  - path: /etc/nginx/hhvm.conf
    content: |
        location ~ \.(hh|php)$ {
            fastcgi_keep_conn on;
            fastcgi_pass unix:/var/run/hhvm/hhvm.sock;
            fastcgi_read_timeout    600;
            fastcgi_index  index.php;
            fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;
            include        fastcgi_params;
        }
  - path: /etc/postfix/main.cf
    content: |
        smtpd_banner = $myhostname ESMTP $mail_name (Ubuntu)
        biff = no

        append_dot_mydomain = no

        readme_directory = no

        smtpd_tls_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem
        smtpd_tls_key_file=/etc/ssl/private/ssl-cert-snakeoil.key
        smtpd_use_tls=yes
        smtpd_tls_session_cache_database = btree:${data_directory}/smtpd_scache
        smtp_tls_session_cache_database = btree:${data_directory}/smtp_scache

        smtpd_relay_restrictions = permit_mynetworks permit_sasl_authenticated defer_unauth_destination
        myhostname = {{hostname}}
        alias_maps = hash:/etc/aliases
        alias_database = hash:/etc/aliases
        myorigin = /etc/mailname
        mydestination = $myhostname, {{rootDomain}}, localhost
        relayhost =
        mynetworks = 127.0.0.0/8 [::ffff:127.0.0.0]/104 [::1]/128
        mailbox_size_limit = 0
        recipient_delimiter = +
        inet_interfaces = loopback-only
        inet_protocols = all
  - path: /etc/hhvm/cron.sh
    content: |
      #!/bin/bash
      ## Install the cron job below by running crontab -e to make the script run every minute ##
      ##                   */1 * * * * bash /change/to/file/path/hhvm.sh                  ##

      if pgrep "hhvm" > /dev/null; then
              :
      else
              /etc/init.d/hhvm start
      fi

      hostname={{hostname}}
      response=$(curl --write-out %{http_code} --silent --output /dev/null -L $hostname)
      if [ $response = 200 ] ; then
              :
      else
              /etc/init.d/hhvm restart
      fi

      find /tmp -type f -name perf-*.map -mmin +20 -exec rm {} +
mysqlroot: &mysql_root {{mysqlRootPassword}}
mysqlwordpress: &mysql_wordpress {{mysqlWordpressPassword}}
configmysql:
  - &config_mysql |
      public_hostname=$(curl -s http://169.254.169.254/metadata/v1/hostname)
      service mysql restart
      expect -f - <<-EOF
        set timeout 10
        spawn mysql_secure_installation
        expect "Enter current password for root (enter for none):"
        send -- "\r"
        expect "Set root password?"
        send -- "y\r"
        expect "New password:"
        send -- "{{mysqlRootPassword}}\r"
        expect "Re-enter new password:"
        send -- "{{mysqlRootPassword}}\r"
        expect "Remove anonymous users?"
        send -- "y\r"
        expect "Disallow root login remotely?"
        send -- "y\r"
        expect "Remove test database and access to it?"
        send -- "y\r"
        expect "Reload privilege tables now?"
        send -- "y\r"
        expect eof
      EOF
      mysql -u root -p{{mysqlRootPassword}} -Bse"CREATE DATABASE wordpress; CREATE USER wordpress@localhost IDENTIFIED BY '"*mysql_wordpress"'; GRANT ALL PRIVILEGES ON wordpress.* to wordpress@localhost IDENTIFIED BY '"*mysql_wordpress"'; FLUSH PRIVILEGES;"
confighhvmcron:
  - &config_hhvm_cron |
      mkdir /var/log/hhvm
      chmod +x /etc/hhvm/cron.sh
      (crontab -l; echo "*/1 * * * * bash /etc/hhvm/cron.sh" ) | crontab -
confignginx:
  - &config_nginx |
      sed -i '/default_type application\/octet-stream;/s/.*/&\n\tclient_max_body_size 128M;/' /etc/nginx/nginx.conf
installwordpress:
  - &install_wordpress |
      cd /var/www/html
      wget wordpress.org/latest.zip
      unzip latest.zip
      mv wordpress/* .
      chown -R www-data:www-data /var/www/html
      rm -rf wordpress latest.zip index.nginx-default.html
      find /var/www/html -type d -exec chown www-data:www-data {} \;
      find /var/www/html -type d -exec chown www-data:www-data {} \;
      mv wp-config-sample.php wp-config.php
      sed -i "/DB_HOST/s/'[^']*'/'localhost'/2" wp-config.php
      sed -i "/DB_NAME/s/'[^']*'/'wordpress'/2" wp-config.php
      sed -i "/DB_USER/s/'[^']*'/'wordpress'/2" wp-config.php
      sed -i "/DB_PASSWORD/s/'[^']*'/'{{mysqlWordpressPassword}}'/2" wp-config.php
      rm /etc/nginx/sites-enabled/default
configufw:
  - &config_ufw |
      ufw allow ssh
      ufw allow http
      ufw allow https
      ufw enable
configagent:
  - &config_agent |
      curl -sSL https://agent.digitalocean.com/install.sh | sh
configdomain:
  - &config_domain |
    export DROPLET_IP=$(curl -s http://169.254.169.254/metadata/v1/interfaces/public/0/ipv4/address)
    curl -X POST -H 'Content-Type: application/json' -d '{"type":"A", "name":"{{subdomain}}", "ttl": 600, "data":"'$DROPLET_IP'"}' -H "Authorization: Bearer {{apiToken}}" https://api.digitalocean.com/v2/domains/{{rootDomain}}/records
configcert:
  - &config_cert |
      ln -s /etc/nginx/sites-available/wordpress-http-only /etc/nginx/sites-enabled/wordpress-http-only
      mkdir /var/local/openssl
      export RANDFILE=/var/local/openssl/.rnd
      openssl dhparam 2048 -out /etc/ssl/dhparam.pem
      export DROPLET_NAME=$(curl -s http://169.254.169.254/metadata/v1/hostname)
      sleep 10m
      certbot --non-interactive --agree-tos --email {{email}} --nginx --domains $DROPLET_NAME
      (crontab -l 2> /dev/null ; echo "43 6 * * * certbot renew --post-hook \"systemctl reload nginx\"")| crontab -
      rm /etc/nginx/sites-enabled/wordpress-http-only
      ln -s /etc/nginx/sites-available/wordpress /etc/nginx/sites-enabled/wordpress
sshsetup:
  - &ssh_setup |
    sed -i -e '/^PermitRootLogin/s/^.*$/PermitRootLogin no/' /etc/ssh/sshd_config
    sed -i -e '$aAllowUsers web' /etc/ssh/sshd_config
    service sshd restart
createswap:
  - &create_swap |
    fallocate -l 3G /swapfile
    mkswap /swapfile
    chmod 0600 /swapfile
    swapon /swapfile
    echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab
runcmd:
  - [sh, -c, 'echo "{{hostname}}"" > /etc/mailname']
  - [sh, -c, 'debconf-set-selections <<< "postfix postfix/mailname string {{hostname}}"']
  - [sh, -c, 'debconf-set-selections <<< "postfix postfix/main_mailer_type string \'Internet Site\'"']
  - [sh, -c, 'apt-get install -y postfix postfix-mysql']
  - [sh, -c, *config_ufw]
  - [sh, -c, *config_domain]
  - [sh, -c, *config_mysql]
  - [sh, -c, *config_nginx]
  - [sh, -c, *config_hhvm_cron]
  - [sh, -c, *install_wordpress]
  - [sh, -c, *config_agent]
  - [sh, -c, *config_cert]
  - service hhvm restart
  - service nginx restart
  - service postfix restart
